/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import topology.category.Top.basic
import category_theory.eq_to_hom

/-!
# The category of open sets in a topological space.

We define `to_Top : opens X ‚•§ Top` and
`map (f : X ‚ü∂ Y) : opens Y ‚•§ opens X`, given by taking preimages of open sets.

Unfortunately `opens` isn't (usefully) a functor `Top ‚•§ Cat`.
(One can in fact define such a functor,
but using it results in unresolvable `eq.rec` terms in goals.)

Really it's a 2-functor from (spaces, continuous functions, equalities)
to (categories, functors, natural isomorphisms).
We don't attempt to set up the full theory here, but do provide the natural isomorphisms
`map_id : map (ùüô X) ‚âÖ ùü≠ (opens X)` and
`map_comp : map (f ‚â´ g) ‚âÖ map g ‚ãô map f`.

Beyond that, there's a collection of simp lemmas for working with these constructions.
-/

open category_theory
open topological_space
open opposite

universe u

namespace topological_space.opens

variables {X Y Z : Top.{u}}

/-!
Since `opens X` has a partial order, it automatically receives a `category` instance.
Unfortunately, because we do not allow morphisms in `Prop`,
the morphisms `U ‚ü∂ V` are not just proofs `U ‚â§ V`, but rather
`ulift (plift (U ‚â§ V))`.
-/

/--
The functor from open sets in `X` to `Top`,
realising each open set as a topological space itself.
-/
def to_Top (X : Top.{u}) : opens X ‚•§ Top :=
{ obj := Œª U, ‚ü®U.val, infer_instance‚ü©,
  map := Œª U V i, ‚ü®Œª x, ‚ü®x.1, i.down.down x.2‚ü©,
    (embedding.continuous_iff embedding_subtype_coe).2 continuous_induced_dom‚ü© }

@[simp]
lemma to_Top_map (X : Top.{u}) {U V : opens X} {f : U ‚ü∂ V} {x} {h} :
  ((to_Top X).map f) ‚ü®x, h‚ü© = ‚ü®x, f.down.down h‚ü© :=
rfl

/-- `opens.map f` gives the functor from open sets in Y to open set in X,
    given by taking preimages under f. -/
def map (f : X ‚ü∂ Y) : opens Y ‚•§ opens X :=
{ obj := Œª U, ‚ü® f ‚Åª¬π' U.val, f.continuous _ U.property ‚ü©,
  map := Œª U V i, ‚ü® ‚ü® Œª a b, i.down.down b ‚ü© ‚ü© }.

@[simp] lemma map_obj (f : X ‚ü∂ Y) (U) (p) : (map f).obj ‚ü®U, p‚ü© = ‚ü®f ‚Åª¬π' U, f.continuous _ p‚ü© :=
rfl

@[simp] lemma map_id_obj (U : opens X) : (map (ùüô X)).obj U = U :=
by { ext, refl } -- not quite `rfl`, since we don't have eta for records

@[simp] lemma map_id_obj' (U) (p) : (map (ùüô X)).obj ‚ü®U, p‚ü© = ‚ü®U, p‚ü© :=
rfl

@[simp] lemma map_id_obj_unop (U : (opens X)·µí·µñ) : (map (ùüô X)).obj (unop U) = unop U :=
by simp
@[simp] lemma op_map_id_obj (U : (opens X)·µí·µñ) : (map (ùüô X)).op.obj U = U :=
by simp

section
variable (X)

/--
The functor `opens X ‚•§ opens X` given by taking preimages under the identity function
is naturally isomorphic to the identity functor.
-/
@[simps]
def map_id : map (ùüô X) ‚âÖ ùü≠ (opens X) :=
{ hom := { app := Œª U, eq_to_hom (map_id_obj U) },
  inv := { app := Œª U, eq_to_hom (map_id_obj U).symm } }

end

@[simp] lemma map_comp_obj (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
  (map (f ‚â´ g)).obj U = (map f).obj ((map g).obj U) :=
by { ext, refl } -- not quite `rfl`, since we don't have eta for records

@[simp] lemma map_comp_obj' (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) (p) :
  (map (f ‚â´ g)).obj ‚ü®U, p‚ü© = (map f).obj ((map g).obj ‚ü®U, p‚ü©) :=
rfl

@[simp] lemma map_comp_obj_unop (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
  (map (f ‚â´ g)).obj (unop U) = (map f).obj ((map g).obj (unop U)) :=
by simp
@[simp] lemma op_map_comp_obj (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (U) :
  (map (f ‚â´ g)).op.obj U = (map f).op.obj ((map g).op.obj U) :=
by simp

/--
The natural isomorphism between taking preimages under `f ‚â´ g`, and the composite
of taking preimages under `g`, then preimages under `f`.
-/
@[simps]
def map_comp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : map (f ‚â´ g) ‚âÖ map g ‚ãô map f :=
{ hom := { app := Œª U, eq_to_hom (map_comp_obj f g U) },
  inv := { app := Œª U, eq_to_hom (map_comp_obj f g U).symm } }

-- We could make `f g` implicit here, but it's nice to be able to see when
-- they are the identity (often!)
def map_iso (f g : X ‚ü∂ Y) (h : f = g) : map f ‚âÖ map g :=
nat_iso.of_components (Œª U, eq_to_iso (congr_fun (congr_arg functor.obj (congr_arg map h)) U) )
  (by obviously)

@[simp] lemma map_iso_refl (f : X ‚ü∂ Y) (h) : map_iso f f h = iso.refl (map _) := rfl

@[simp] lemma map_iso_hom_app (f g : X ‚ü∂ Y) (h : f = g) (U : opens Y) :
  (map_iso f g h).hom.app U = eq_to_hom (congr_fun (congr_arg functor.obj (congr_arg map h)) U) :=
rfl

@[simp] lemma map_iso_inv_app (f g : X ‚ü∂ Y) (h : f = g) (U : opens Y) :
  (map_iso f g h).inv.app U =
     eq_to_hom (congr_fun (congr_arg functor.obj (congr_arg map h.symm)) U) :=
rfl

end topological_space.opens
